name: nixcachix
on:
  check_suite:
    types: [completed]
  # workflow_dispatch:
  push:
  # pull_request:
jobs:
  build-machines:
    strategy:
      matrix:
        machine:
          # hostname of your nixosSystem's
          # - poseidon
          # - cassini
          # - thinsandy
          # - schneeeule
          # - mtfuji
          # - ancientace
          # - guckloch
          - minyx
        os:
          # - ubuntu-latest
          # add others as you need
          # - macos-latest
          - ubuntu-24.04-arm

    runs-on: ${{ matrix.os }}
    steps:
      # you might need this if your build causes the runner to run out of disk space
      - name: Maximize build disk space
        uses: easimon/maximize-build-space@v10
        with:
          overprovision-lvm: true
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
          build-mount-path: /nix

      - name: Install Nix
        uses: cachix/install-nix-action@v30

      - name: Sync repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # this is what uploads our builds to the cache (also makes our CI use the cache from previous runs)!
      - uses: cachix/cachix-action@v14
        with:
          name: shaoyanji # replace with the name of your cachix cache
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          useDaemon: false
          installCommand: nix profile install nixpkgs#cachix

      # this is equivalent to `nixos-rebuild build`
      - run: nix build -L .#nixosConfigurations.${{ matrix.machine }}.config.system.build.toplevel
  build-homes:
    strategy:
      matrix:
        home:
          # - penguin
          # - verntil
          - kali
        os:
          # - ubuntu-latest
          # - macos-latest
          - ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Maximize build disk space
        uses: easimon/maximize-build-space@v10
        with:
          overprovision-lvm: true
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
          build-mount-path: /nix
      - uses: nixbuild/nix-quick-install-action@master
      - name: Sync repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: cachix/cachix-action@v14
        with:
          name: shaoyanji
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          useDaemon: false
          installCommand: nix profile install nixpkgs#cachix
      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5.1.0
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ matrix.home }}-${{ hashFiles('**/*.nix', 'flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-${{ matrix.home }}-
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-last-accessed: 86400
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never
          # always save the cache
          save-always: true
      - run: nix build -L .#homeConfigurations."${{ matrix.home }}".activationPackage
