{
  pkgs,
  lib,
  self,
  ...
}: let
  # TODO: add your public ssh key here to be able to log into the deployed host (as user `me`).
  sshKeys = [
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIK7DhNfJukAnHyO87pfDJ9y5auw7SqrZDSQBWFLQl6W/ kali@kali"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKMm+Aj29fd3Kjrxb8P3ZyUGHvm3GlSHHJ4+yjr+3hpP Generated By Termius"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKVYLgws2TgaYIsOmVmJeoJIu9F8lguBXi711Kv90jaM devji@poseidon"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOD4PopDAxzh1t4nNnDE/xiWLGYzopLRzZ7eBwd4hHza devji@schneeeule"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHfnYbTF2d4ZA4+wKbXFL/UUJTcMqdLDhhAZZDP2KrPD devji@orb-cassini"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILFrpuKNvTGARCr6vacmyHRkjDnfEbdAp9+zWHTRRDD9 devji@thinsandy"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHVyGpjlVwKmhW9+t0iak1WuRov3xPZ/bTU3Y471Pmai wetnose@BurgerNAS"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOOv1lniY72qgt2QE64JB75G84b9qbqLYrSo+RQDUU0T devji@ancientace"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFDl1/MsQfkmnAIvETZnLD+V+s9/o6EiRkzBMDbjhcVL devji@mtfuji"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFIzm1z4VPcKzuzSTOlVtE9C+kopHRK1mtncGsb5k6YH Shortcuts on iPhone-Bon-Ji0v1"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICW0tS7KTBySuE49gSHuqAK1Je+ODY+YGc81eTIvonFh Shortcuts on cassini"
    "ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJB2LmOgmY+pLU/QGf0KZUoujlklRin7XJoPN0DFBSC4e6ivsH/Uaqa3pfmsOx8vUHef2492cnWUt5BFn7cJPrk="
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIZXtw+dZv/J1zRWjeyQS7NzLO53vjHfDRIBL5k1anMg jisifu@gmail.com"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMEvIBjy85SIOMbk9WCY/jSrKiXcJ8aA4xqvMKC1b4aH jisifu@gmail.com"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJ/yKF1l8oT/PotNGpPgUyBSQDG0xsJpsDP2UIXBxqkI devji@applevalley"
    "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILafESrQ/gxr1Dh9KMmgNug6DCeENerx5xlH9cnUdTjm dietpi@dietzappy" # "ssh-rsa <YOUR_PUBLIC_SSH_KEY>"
  ];
  backendPort = "3000";
in {
  # This sets up networking and filesystems in a way that works with garnix
  # hosting.
  garnix.server.enable = true;

  # This is so we can log in.
  #   - First we enable SSH
  services.openssh.enable = true;
  #   - Then we create a user called "me". You can change it if you like; just
  #     remember to use that user when ssh'ing into the machine.
  users.users.me = {
    # This lets NixOS know this is a "real" user rather than a system user,
    # giving you for example a home directory.
    isNormalUser = true;
    description = "me";
    extraGroups = ["wheel" "systemd-journal"];
    openssh.authorizedKeys.keys = sshKeys;
  };
  # This allows you to use `sudo` without a password when ssh'ed into the machine.
  security.sudo.wheelNeedsPassword = false;

  # This specifies what packages are available in your system. You can choose
  # from over 100,000 - search for them here:
  #   https://search.nixos.org/options?channel=24.05
  environment.systemPackages = [
    pkgs.htop
    pkgs.tree
  ];

  # Setting up a systemd unit running the go backend.
  systemd.services.backend = {
    description = "example go backend";
    wantedBy = ["multi-user.target"];
    wants = ["network-online.target"];
    serviceConfig = {
      Environment = "PORT=" + backendPort;
      Type = "simple";
      DynamicUser = true;
      ExecStart = lib.getExe self.packages.${pkgs.system}.backend;
    };
  };

  # Configuring `nginx` to do two things:
  #
  # 1. Serve the frontend bundle on /.
  # 2. Proxy to the backend on /api.
  services.nginx = {
    # This switches on nginx.
    enable = true;
    # Enabling some good defaults.
    recommendedProxySettings = true;
    recommendedOptimisation = true;
    recommendedGzipSettings = true;
    virtualHosts."default" = {
      # Serving the frontend bundle by default.
      locations."/".root = "${self.packages.${pkgs.system}.frontend-bundle}";
      # Proxying to the backend on /api.
      locations."/api".proxyPass = "http://localhost:${backendPort}/";
    };
  };

  # We open just the http default port in the firewall. SSL termination happens
  # automatically on garnix's side.
  networking.firewall.allowedTCPPorts = [80];

  # This is currently the only allowed value.
  nixpkgs.hostPlatform = "x86_64-linux";
}
